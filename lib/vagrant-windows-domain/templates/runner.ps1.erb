function Test-PartOfDomain($computerName, $domain){
	$computerSystem = gwmi win32_computersystem
	return ($computerSystem.Name -eq $computerName) -and ($computerSystem.PartOfDomain) -and ($computerSystem.Domain -eq $domain) 
}

function Test-JoinedToADomain(){
	$computerSystem = gwmi win32_computersystem
	return $computerSystem.PartOfDomain
}

function Repair-OpenSSHPasswd(){
	$passwdPath = 'C:\Program Files\OpenSSH\etc\passwd'
	$mkpasswdPath = 'C:\Program Files\OpenSSH\bin\mkpasswd.exe'
	if ((Test-Path $passwdPath) -and (Test-Path $mkpasswdPath)){
		$passwd = &$mkpasswdPath
		$passwd = $passwd -replace '^([^+]*\+)', ''
		$passwd | Set-Content $passwdPath -Encoding Ascii
	}
}
function New-ADSIPrincipalContext
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	[OutputType('System.DirectoryServices.AccountManagement.PrincipalContext')]
	PARAM
	(
		[Alias("RunAs")]
		[System.Management.Automation.PSCredential]
		[System.Management.Automation.Credential()]
		$Credential = [System.Management.Automation.PSCredential]::Empty,
		
		[Parameter(Mandatory = $true)]
		[System.DirectoryServices.AccountManagement.ContextType]$ContextType,
		
		$DomainName = [System.DirectoryServices.ActiveDirectory.Domain]::Getcurrentdomain(),
		
		$Container,
		
		[System.DirectoryServices.AccountManagement.ContextOptions[]]$ContextOptions
	)
	
	BEGIN
	{
		$ScriptName = (Get-Variable -name MyInvocation -Scope 0 -ValueOnly).MyCommand
		Write-Verbose -Message "[$ScriptName] Add Type System.DirectoryServices.AccountManagement"
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
	}
	PROCESS
	{
		TRY
		{
			switch ($ContextType)
			{
				"Domain" { $ArgumentList = $ContextType, $DomainName }
				"Machine" { $ArgumentList = $ContextType, $ComputerName }
				"ApplicationDirectory" { $ArgumentList = $ContextType }
			}
			
			IF ($PSBoundParameters['Container'])
			{
				$ArgumentList += $Container
			}
			
			IF ($PSBoundParameters['ContextOptions'])
			{
				$ArgumentList += $($ContextOptions)
			}
			
			IF ($PSBoundParameters['Credential'])
			{
				# Query the specified domain or current if not entered, with the specified credentials
				$ArgumentList += $($Credential.UserName), $($Credential.GetNetworkCredential().password)
			}
			
			IF ($PSCmdlet.ShouldProcess($DomainName, "Create Principal Context"))
			{
				# Query 
				New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList $ArgumentList
			}
		} #TRY
		CATCH
		{
			$PSCmdlet.ThrowTerminatingError($_)
		}
	} #PROCESS
}

function Get-ADSIComputer
{
	[CmdletBinding(DefaultParameterSetName="All")]
	param ([Parameter(Mandatory=$true,ParameterSetName="Identity")]
		[string]$Identity,
		
		[Alias("RunAs")]
		[System.Management.Automation.PSCredential]
		[System.Management.Automation.Credential()]
		$Credential = [System.Management.Automation.PSCredential]::Empty,

		[String]$DomainName
	)
	BEGIN
	{
        Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
        # Create Context splatting
        $ContextSplatting = @{ ContextType = "Domain" }
		
        IF ($PSBoundParameters['Credential']) { $ContextSplatting.Credential = $Credential }
        IF ($PSBoundParameters['DomainName']) { $ContextSplatting.DomainName = $DomainName }
		
        $Context = New-ADSIPrincipalContext @ContextSplatting

	}
	PROCESS
	{
        TRY{
            IF($Identity)
            {
                [System.DirectoryServices.AccountManagement.ComputerPrincipal]::FindByIdentity($Context, $Identity)
            }
            ELSE{
                $ComputerPrincipal = New-object -TypeName System.DirectoryServices.AccountManagement.ComputerPrincipal -ArgumentList $Context
			    $Searcher = new-object System.DirectoryServices.AccountManagement.PrincipalSearcher
			    $Searcher.QueryFilter = $ComputerPrincipal

                $Searcher.FindAll()
            }
        }
        CATCH
        {
        	$pscmdlet.ThrowTerminatingError($_)
        }
	}
}

function Remove-ADSIComputer
{
	[CmdletBinding(SupportsShouldProcess = $true)]
	PARAM (
		[parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
		$Identity,

		[Alias("RunAs")]
		[System.Management.Automation.PSCredential]
		[System.Management.Automation.Credential()]
		$Credential = [System.Management.Automation.PSCredential]::Empty,

		[String]$DomainName,

		[Switch]$Recursive
	)
	
	BEGIN
	{
		Add-Type -AssemblyName System.DirectoryServices.AccountManagement
		
		# Create Context splatting
		$ContextSplatting = @{ }
		IF ($PSBoundParameters['Credential']) { $ContextSplatting.Credential = $Credential }
		IF ($PSBoundParameters['DomainName']) { $ContextSplatting.DomainName = $DomainName }

	}
	PROCESS
	{
		TRY
		{
			# Not Recursive
			if (-not $PSBoundParameters['Recursive'])
			{
				if ($pscmdlet.ShouldProcess("$Identity", "Remove Account"))
				{
					$Account = Get-ADSIComputer -Identity $Identity @ContextSplatting
					$Account.delete()
				}
			}
			
			# Recursive (if the computer is the parent of one leaf or more)
			if ($PSBoundParameters['Recursive'])
			{
				if ($pscmdlet.ShouldProcess("$Identity", "Remove Account and any child objects"))
				{
					$Account = Get-ADSIComputer -Identity $Identity @ContextSplatting
					$Account.GetUnderlyingObject().deletetree()
				}
			}
			
		}
		CATCH
		{
			$pscmdlet.ThrowTerminatingError($_)
		}
	}
}
<% if options[:computer_name] != nil %>
$computerName='<%= options[:computer_name] %>'
<% else %>
$computerName = $env:COMPUTERNAME
<% end %>
<% if options[:username] != nil && options[:unsecure] != true %>
$domain='<%= options[:domain] %>'
$username='<%= options[:username] %>'
$password='<%= options[:password] %>'
$secpasswd = ConvertTo-SecureString $password -AsPlainText -Force
$credentials = New-Object System.Management.Automation.PSCredential ($username, $secpasswd)
<% end %>

<% if options[:add_to_domain] === true %>
if (Test-PartOfDomain -computerName $computerName -domain $domain){
	throw "$computerName already part of domain $domain"
} else {
	#If a value is provided for the Primary_DNS variable in the vagrantfile, powershell will attempt to determine if the string is a valid IP and will statically set the primary dns server of the vm's nic if it is.
	<% if options[:primary_dns] != nil %>
		$prim = '<%= options[:primary_dns] %>'
		If ($prim -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
		{
			$wmi = Get-WmiObject -ComputerName $env:COMPUTERNAME -Namespace "root\CIMV2" -Class "Win32_NetworkAdapterconfiguration" -Filter 'IPENABLED=TRUE' -Impersonation Impersonate -ErrorAction Stop | Where-Object { $_.DefaultIPGateway }
			$currdns = $wmi.DNSServerSearchOrder
			$wmi.SetDNSServerSearchOrder(@($prim, $currdns[1]))
		}
		else
		{
			throw "Invalid IP address provided"
		}
	<% end %>

	#If a value is provided for the Secondary_DNS variable in the vagrantfile, powershell will attempt to determine if the string is a valid IP and will statically set the secondary dns server of the vm's nic if it is.
	<% if options[:secondary_dns] != nil %>
		$sec = '<%= options[:secondary_dns] %>'
		If ($sec -match "^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$")
		{
			$wmi = Get-WmiObject -ComputerName $env:COMPUTERNAME -Namespace "root\CIMV2" -Class "Win32_NetworkAdapterconfiguration" -Filter 'IPENABLED=TRUE' -Impersonation Impersonate -ErrorAction Stop | Where-Object { $_.DefaultIPGateway }
			$currdns = $wmi.DNSServerSearchOrder
			$wmi.SetDNSServerSearchOrder(@($currdns[0], $sec))
		}
		else
		{
			throw "Invalid IP address provided"
		}
	<% end %>
	Get-NetConnectionProfile | Set-NetConnectionProfile -NetworkCategory private
	Add-Computer <%= options[:parameters] %> -Verbose -Force -PassThru

	# Rename computer separately: Fixes GH issue #11
	<% if options[:computer_name] != nil %>
	$completed = $false
	while ( -not $completed) {
		try {
			Rename-Computer <%= options_rename[:parameters] %> -Verbose -Force -ErrorAction Stop
			$completed = $true
		} catch {
			if ($retrycount -ge 5) {
				Write-Host ("Rename failed the maximum number of $retrycount times.")
				throw
			} else {
				Write-Host ("Rename failed, Retrying in 5 seconds...")
				Start-sleep -s 5
				$retrycount++
			}
		}
	}
	<% end %>	
	
	Repair-OpenSSHPasswd
}
<% else %>
if (!(Test-JoinedToADomain)) {
	Throw "$computerName not part of any domain"
} else {
	#When destroying the vagrant machine, the goal is not as much to have the virtual machine disjoin from the domain, but to remove the computer object associated with the
	#machine so that future runs of vagrant up will succeed (especially when the vagrantfile explicitly defines a computer name.  That being the case, the remove-computer
	#command has been replaced with a custom function which is able to remove the computer object associated with the vagrant machine in active directory.
	Remove-ADSIComputer -Identity $env:COMPUTERNAME -DomainName $domain -Credential $credentials -Verbose
	Repair-OpenSSHPasswd
}
<% end %>
